// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/clip"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/game"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/vod"
)

// Game is the model entity for the Game schema.
type Game struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GameID holds the value of the "game_id" field.
	GameID int `json:"game_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// BoxArt holds the value of the "box_art" field.
	BoxArt string `json:"box_art,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameQuery when eager-loading is set.
	Edges     GameEdges `json:"edges"`
	clip_game *int
	vod_game  *int
}

// GameEdges holds the relations/edges for other nodes in the graph.
type GameEdges struct {
	// Clip holds the value of the clip edge.
	Clip *Clip `json:"clip,omitempty"`
	// Vod holds the value of the vod edge.
	Vod *Vod `json:"vod,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ClipOrErr returns the Clip value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) ClipOrErr() (*Clip, error) {
	if e.loadedTypes[0] {
		if e.Clip == nil {
			// The edge clip was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: clip.Label}
		}
		return e.Clip, nil
	}
	return nil, &NotLoadedError{edge: "clip"}
}

// VodOrErr returns the Vod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) VodOrErr() (*Vod, error) {
	if e.loadedTypes[1] {
		if e.Vod == nil {
			// The edge vod was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vod.Label}
		}
		return e.Vod, nil
	}
	return nil, &NotLoadedError{edge: "vod"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Game) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case game.FieldID, game.FieldGameID:
			values[i] = new(sql.NullInt64)
		case game.FieldName, game.FieldBoxArt:
			values[i] = new(sql.NullString)
		case game.ForeignKeys[0]: // clip_game
			values[i] = new(sql.NullInt64)
		case game.ForeignKeys[1]: // vod_game
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Game", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Game fields.
func (ga *Game) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case game.FieldGameID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field game_id", values[i])
			} else if value.Valid {
				ga.GameID = int(value.Int64)
			}
		case game.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ga.Name = value.String
			}
		case game.FieldBoxArt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field box_art", values[i])
			} else if value.Valid {
				ga.BoxArt = value.String
			}
		case game.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field clip_game", value)
			} else if value.Valid {
				ga.clip_game = new(int)
				*ga.clip_game = int(value.Int64)
			}
		case game.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field vod_game", value)
			} else if value.Valid {
				ga.vod_game = new(int)
				*ga.vod_game = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryClip queries the "clip" edge of the Game entity.
func (ga *Game) QueryClip() *ClipQuery {
	return (&GameClient{config: ga.config}).QueryClip(ga)
}

// QueryVod queries the "vod" edge of the Game entity.
func (ga *Game) QueryVod() *VodQuery {
	return (&GameClient{config: ga.config}).QueryVod(ga)
}

// Update returns a builder for updating this Game.
// Note that you need to call Game.Unwrap() before calling this method if this Game
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Game) Update() *GameUpdateOne {
	return (&GameClient{config: ga.config}).UpdateOne(ga)
}

// Unwrap unwraps the Game entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Game) Unwrap() *Game {
	tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Game is not a transactional entity")
	}
	ga.config.driver = tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Game) String() string {
	var builder strings.Builder
	builder.WriteString("Game(")
	builder.WriteString(fmt.Sprintf("id=%v", ga.ID))
	builder.WriteString(", game_id=")
	builder.WriteString(fmt.Sprintf("%v", ga.GameID))
	builder.WriteString(", name=")
	builder.WriteString(ga.Name)
	builder.WriteString(", box_art=")
	builder.WriteString(ga.BoxArt)
	builder.WriteByte(')')
	return builder.String()
}

// Games is a parsable slice of Game.
type Games []*Game

func (ga Games) config(cfg config) {
	for _i := range ga {
		ga[_i].config = cfg
	}
}
