// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/creator"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/vod"
)

// Vod is the model entity for the Vod schema.
type Vod struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename,omitempty"`
	// Resolution holds the value of the "resolution" field.
	Resolution string `json:"resolution,omitempty"`
	// Fps holds the value of the "fps" field.
	Fps float64 `json:"fps,omitempty"`
	// Size holds the value of the "size" field.
	Size int `json:"size,omitempty"`
	// Publish holds the value of the "publish" field.
	Publish bool `json:"publish,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VodQuery when eager-loading is set.
	Edges        VodEdges `json:"edges"`
	creator_vods *int
}

// VodEdges holds the relations/edges for other nodes in the graph.
type VodEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Creator `json:"creator,omitempty"`
	// Clips holds the value of the clips edge.
	Clips []*Clip `json:"clips,omitempty"`
	// Game holds the value of the game edge.
	Game []*Game `json:"game,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VodEdges) CreatorOrErr() (*Creator, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// The edge creator was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: creator.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// ClipsOrErr returns the Clips value or an error if the edge
// was not loaded in eager-loading.
func (e VodEdges) ClipsOrErr() ([]*Clip, error) {
	if e.loadedTypes[1] {
		return e.Clips, nil
	}
	return nil, &NotLoadedError{edge: "clips"}
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading.
func (e VodEdges) GameOrErr() ([]*Game, error) {
	if e.loadedTypes[2] {
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vod) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case vod.FieldPublish:
			values[i] = new(sql.NullBool)
		case vod.FieldFps:
			values[i] = new(sql.NullFloat64)
		case vod.FieldID, vod.FieldDuration, vod.FieldSize:
			values[i] = new(sql.NullInt64)
		case vod.FieldTitle, vod.FieldFilename, vod.FieldResolution:
			values[i] = new(sql.NullString)
		case vod.FieldDate:
			values[i] = new(sql.NullTime)
		case vod.ForeignKeys[0]: // creator_vods
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vod", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vod fields.
func (v *Vod) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vod.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case vod.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				v.Title = value.String
			}
		case vod.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				v.Duration = int(value.Int64)
			}
		case vod.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				v.Date = value.Time
			}
		case vod.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				v.Filename = value.String
			}
		case vod.FieldResolution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolution", values[i])
			} else if value.Valid {
				v.Resolution = value.String
			}
		case vod.FieldFps:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fps", values[i])
			} else if value.Valid {
				v.Fps = value.Float64
			}
		case vod.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				v.Size = int(value.Int64)
			}
		case vod.FieldPublish:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field publish", values[i])
			} else if value.Valid {
				v.Publish = value.Bool
			}
		case vod.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field creator_vods", value)
			} else if value.Valid {
				v.creator_vods = new(int)
				*v.creator_vods = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCreator queries the "creator" edge of the Vod entity.
func (v *Vod) QueryCreator() *CreatorQuery {
	return (&VodClient{config: v.config}).QueryCreator(v)
}

// QueryClips queries the "clips" edge of the Vod entity.
func (v *Vod) QueryClips() *ClipQuery {
	return (&VodClient{config: v.config}).QueryClips(v)
}

// QueryGame queries the "game" edge of the Vod entity.
func (v *Vod) QueryGame() *GameQuery {
	return (&VodClient{config: v.config}).QueryGame(v)
}

// Update returns a builder for updating this Vod.
// Note that you need to call Vod.Unwrap() before calling this method if this Vod
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vod) Update() *VodUpdateOne {
	return (&VodClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vod entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vod) Unwrap() *Vod {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vod is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vod) String() string {
	var builder strings.Builder
	builder.WriteString("Vod(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", title=")
	builder.WriteString(v.Title)
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", v.Duration))
	builder.WriteString(", date=")
	builder.WriteString(v.Date.Format(time.ANSIC))
	builder.WriteString(", filename=")
	builder.WriteString(v.Filename)
	builder.WriteString(", resolution=")
	builder.WriteString(v.Resolution)
	builder.WriteString(", fps=")
	builder.WriteString(fmt.Sprintf("%v", v.Fps))
	builder.WriteString(", size=")
	builder.WriteString(fmt.Sprintf("%v", v.Size))
	builder.WriteString(", publish=")
	builder.WriteString(fmt.Sprintf("%v", v.Publish))
	builder.WriteByte(')')
	return builder.String()
}

// Vods is a parsable slice of Vod.
type Vods []*Vod

func (v Vods) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
