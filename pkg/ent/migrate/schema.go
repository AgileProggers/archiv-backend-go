// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ClipsColumns holds the columns for the "clips" table.
	ClipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "duration", Type: field.TypeInt},
		{Name: "date", Type: field.TypeTime},
		{Name: "filename", Type: field.TypeString},
		{Name: "resolution", Type: field.TypeString},
		{Name: "size", Type: field.TypeInt},
		{Name: "view_count", Type: field.TypeInt},
		{Name: "creator_clips", Type: field.TypeInt, Nullable: true},
	}
	// ClipsTable holds the schema information for the "clips" table.
	ClipsTable = &schema.Table{
		Name:       "clips",
		Columns:    ClipsColumns,
		PrimaryKey: []*schema.Column{ClipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "clips_creators_clips",
				Columns:    []*schema.Column{ClipsColumns[8]},
				RefColumns: []*schema.Column{CreatorsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CreatorsColumns holds the columns for the "creators" table.
	CreatorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// CreatorsTable holds the schema information for the "creators" table.
	CreatorsTable = &schema.Table{
		Name:       "creators",
		Columns:    CreatorsColumns,
		PrimaryKey: []*schema.Column{CreatorsColumns[0]},
	}
	// EmotesColumns holds the columns for the "emotes" table.
	EmotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "url", Type: field.TypeString, Unique: true},
		{Name: "provider_emotes", Type: field.TypeInt, Nullable: true},
	}
	// EmotesTable holds the schema information for the "emotes" table.
	EmotesTable = &schema.Table{
		Name:       "emotes",
		Columns:    EmotesColumns,
		PrimaryKey: []*schema.Column{EmotesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "emotes_providers_emotes",
				Columns:    []*schema.Column{EmotesColumns[3]},
				RefColumns: []*schema.Column{ProvidersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GamesColumns holds the columns for the "games" table.
	GamesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "game_id", Type: field.TypeInt},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "box_art", Type: field.TypeString},
		{Name: "clip_game", Type: field.TypeInt, Nullable: true},
		{Name: "vod_game", Type: field.TypeInt, Nullable: true},
	}
	// GamesTable holds the schema information for the "games" table.
	GamesTable = &schema.Table{
		Name:       "games",
		Columns:    GamesColumns,
		PrimaryKey: []*schema.Column{GamesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "games_clips_game",
				Columns:    []*schema.Column{GamesColumns[4]},
				RefColumns: []*schema.Column{ClipsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "games_vods_game",
				Columns:    []*schema.Column{GamesColumns[5]},
				RefColumns: []*schema.Column{VodsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProvidersColumns holds the columns for the "providers" table.
	ProvidersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// ProvidersTable holds the schema information for the "providers" table.
	ProvidersTable = &schema.Table{
		Name:       "providers",
		Columns:    ProvidersColumns,
		PrimaryKey: []*schema.Column{ProvidersColumns[0]},
	}
	// VodsColumns holds the columns for the "vods" table.
	VodsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "duration", Type: field.TypeInt},
		{Name: "date", Type: field.TypeTime},
		{Name: "filename", Type: field.TypeString},
		{Name: "resolution", Type: field.TypeString},
		{Name: "fps", Type: field.TypeFloat64},
		{Name: "size", Type: field.TypeInt},
		{Name: "publish", Type: field.TypeBool},
	}
	// VodsTable holds the schema information for the "vods" table.
	VodsTable = &schema.Table{
		Name:       "vods",
		Columns:    VodsColumns,
		PrimaryKey: []*schema.Column{VodsColumns[0]},
	}
	// VodClipsColumns holds the columns for the "vod_clips" table.
	VodClipsColumns = []*schema.Column{
		{Name: "vod_id", Type: field.TypeInt},
		{Name: "clip_id", Type: field.TypeInt},
	}
	// VodClipsTable holds the schema information for the "vod_clips" table.
	VodClipsTable = &schema.Table{
		Name:       "vod_clips",
		Columns:    VodClipsColumns,
		PrimaryKey: []*schema.Column{VodClipsColumns[0], VodClipsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "vod_clips_vod_id",
				Columns:    []*schema.Column{VodClipsColumns[0]},
				RefColumns: []*schema.Column{VodsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "vod_clips_clip_id",
				Columns:    []*schema.Column{VodClipsColumns[1]},
				RefColumns: []*schema.Column{ClipsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ClipsTable,
		CreatorsTable,
		EmotesTable,
		GamesTable,
		ProvidersTable,
		VodsTable,
		VodClipsTable,
	}
)

func init() {
	ClipsTable.ForeignKeys[0].RefTable = CreatorsTable
	EmotesTable.ForeignKeys[0].RefTable = ProvidersTable
	GamesTable.ForeignKeys[0].RefTable = ClipsTable
	GamesTable.ForeignKeys[1].RefTable = VodsTable
	VodClipsTable.ForeignKeys[0].RefTable = VodsTable
	VodClipsTable.ForeignKeys[1].RefTable = ClipsTable
}
