// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/AgileProggers/archiv-backend-go/pkg/ent/migrate"

	"github.com/AgileProggers/archiv-backend-go/pkg/ent/clip"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/creator"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/emote"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/game"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/provider"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/vod"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Clip is the client for interacting with the Clip builders.
	Clip *ClipClient
	// Creator is the client for interacting with the Creator builders.
	Creator *CreatorClient
	// Emote is the client for interacting with the Emote builders.
	Emote *EmoteClient
	// Game is the client for interacting with the Game builders.
	Game *GameClient
	// Provider is the client for interacting with the Provider builders.
	Provider *ProviderClient
	// Vod is the client for interacting with the Vod builders.
	Vod *VodClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Clip = NewClipClient(c.config)
	c.Creator = NewCreatorClient(c.config)
	c.Emote = NewEmoteClient(c.config)
	c.Game = NewGameClient(c.config)
	c.Provider = NewProviderClient(c.config)
	c.Vod = NewVodClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Clip:     NewClipClient(cfg),
		Creator:  NewCreatorClient(cfg),
		Emote:    NewEmoteClient(cfg),
		Game:     NewGameClient(cfg),
		Provider: NewProviderClient(cfg),
		Vod:      NewVodClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Clip:     NewClipClient(cfg),
		Creator:  NewCreatorClient(cfg),
		Emote:    NewEmoteClient(cfg),
		Game:     NewGameClient(cfg),
		Provider: NewProviderClient(cfg),
		Vod:      NewVodClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Clip.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Clip.Use(hooks...)
	c.Creator.Use(hooks...)
	c.Emote.Use(hooks...)
	c.Game.Use(hooks...)
	c.Provider.Use(hooks...)
	c.Vod.Use(hooks...)
}

// ClipClient is a client for the Clip schema.
type ClipClient struct {
	config
}

// NewClipClient returns a client for the Clip from the given config.
func NewClipClient(c config) *ClipClient {
	return &ClipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clip.Hooks(f(g(h())))`.
func (c *ClipClient) Use(hooks ...Hook) {
	c.hooks.Clip = append(c.hooks.Clip, hooks...)
}

// Create returns a create builder for Clip.
func (c *ClipClient) Create() *ClipCreate {
	mutation := newClipMutation(c.config, OpCreate)
	return &ClipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Clip entities.
func (c *ClipClient) CreateBulk(builders ...*ClipCreate) *ClipCreateBulk {
	return &ClipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Clip.
func (c *ClipClient) Update() *ClipUpdate {
	mutation := newClipMutation(c.config, OpUpdate)
	return &ClipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClipClient) UpdateOne(cl *Clip) *ClipUpdateOne {
	mutation := newClipMutation(c.config, OpUpdateOne, withClip(cl))
	return &ClipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClipClient) UpdateOneID(id int) *ClipUpdateOne {
	mutation := newClipMutation(c.config, OpUpdateOne, withClipID(id))
	return &ClipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Clip.
func (c *ClipClient) Delete() *ClipDelete {
	mutation := newClipMutation(c.config, OpDelete)
	return &ClipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ClipClient) DeleteOne(cl *Clip) *ClipDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ClipClient) DeleteOneID(id int) *ClipDeleteOne {
	builder := c.Delete().Where(clip.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClipDeleteOne{builder}
}

// Query returns a query builder for Clip.
func (c *ClipClient) Query() *ClipQuery {
	return &ClipQuery{
		config: c.config,
	}
}

// Get returns a Clip entity by its id.
func (c *ClipClient) Get(ctx context.Context, id int) (*Clip, error) {
	return c.Query().Where(clip.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClipClient) GetX(ctx context.Context, id int) *Clip {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreator queries the creator edge of a Clip.
func (c *ClipClient) QueryCreator(cl *Clip) *CreatorQuery {
	query := &CreatorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clip.Table, clip.FieldID, id),
			sqlgraph.To(creator.Table, creator.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, clip.CreatorTable, clip.CreatorColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVod queries the vod edge of a Clip.
func (c *ClipClient) QueryVod(cl *Clip) *VodQuery {
	query := &VodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clip.Table, clip.FieldID, id),
			sqlgraph.To(vod.Table, vod.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, clip.VodTable, clip.VodPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGame queries the game edge of a Clip.
func (c *ClipClient) QueryGame(cl *Clip) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(clip.Table, clip.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, clip.GameTable, clip.GameColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ClipClient) Hooks() []Hook {
	return c.hooks.Clip
}

// CreatorClient is a client for the Creator schema.
type CreatorClient struct {
	config
}

// NewCreatorClient returns a client for the Creator from the given config.
func NewCreatorClient(c config) *CreatorClient {
	return &CreatorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `creator.Hooks(f(g(h())))`.
func (c *CreatorClient) Use(hooks ...Hook) {
	c.hooks.Creator = append(c.hooks.Creator, hooks...)
}

// Create returns a create builder for Creator.
func (c *CreatorClient) Create() *CreatorCreate {
	mutation := newCreatorMutation(c.config, OpCreate)
	return &CreatorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Creator entities.
func (c *CreatorClient) CreateBulk(builders ...*CreatorCreate) *CreatorCreateBulk {
	return &CreatorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Creator.
func (c *CreatorClient) Update() *CreatorUpdate {
	mutation := newCreatorMutation(c.config, OpUpdate)
	return &CreatorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CreatorClient) UpdateOne(cr *Creator) *CreatorUpdateOne {
	mutation := newCreatorMutation(c.config, OpUpdateOne, withCreator(cr))
	return &CreatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CreatorClient) UpdateOneID(id int) *CreatorUpdateOne {
	mutation := newCreatorMutation(c.config, OpUpdateOne, withCreatorID(id))
	return &CreatorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Creator.
func (c *CreatorClient) Delete() *CreatorDelete {
	mutation := newCreatorMutation(c.config, OpDelete)
	return &CreatorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CreatorClient) DeleteOne(cr *Creator) *CreatorDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CreatorClient) DeleteOneID(id int) *CreatorDeleteOne {
	builder := c.Delete().Where(creator.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CreatorDeleteOne{builder}
}

// Query returns a query builder for Creator.
func (c *CreatorClient) Query() *CreatorQuery {
	return &CreatorQuery{
		config: c.config,
	}
}

// Get returns a Creator entity by its id.
func (c *CreatorClient) Get(ctx context.Context, id int) (*Creator, error) {
	return c.Query().Where(creator.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CreatorClient) GetX(ctx context.Context, id int) *Creator {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClips queries the clips edge of a Creator.
func (c *CreatorClient) QueryClips(cr *Creator) *ClipQuery {
	query := &ClipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(creator.Table, creator.FieldID, id),
			sqlgraph.To(clip.Table, clip.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, creator.ClipsTable, creator.ClipsColumn),
		)
		fromV = sqlgraph.Neighbors(cr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CreatorClient) Hooks() []Hook {
	return c.hooks.Creator
}

// EmoteClient is a client for the Emote schema.
type EmoteClient struct {
	config
}

// NewEmoteClient returns a client for the Emote from the given config.
func NewEmoteClient(c config) *EmoteClient {
	return &EmoteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emote.Hooks(f(g(h())))`.
func (c *EmoteClient) Use(hooks ...Hook) {
	c.hooks.Emote = append(c.hooks.Emote, hooks...)
}

// Create returns a create builder for Emote.
func (c *EmoteClient) Create() *EmoteCreate {
	mutation := newEmoteMutation(c.config, OpCreate)
	return &EmoteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Emote entities.
func (c *EmoteClient) CreateBulk(builders ...*EmoteCreate) *EmoteCreateBulk {
	return &EmoteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Emote.
func (c *EmoteClient) Update() *EmoteUpdate {
	mutation := newEmoteMutation(c.config, OpUpdate)
	return &EmoteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmoteClient) UpdateOne(e *Emote) *EmoteUpdateOne {
	mutation := newEmoteMutation(c.config, OpUpdateOne, withEmote(e))
	return &EmoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmoteClient) UpdateOneID(id int) *EmoteUpdateOne {
	mutation := newEmoteMutation(c.config, OpUpdateOne, withEmoteID(id))
	return &EmoteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Emote.
func (c *EmoteClient) Delete() *EmoteDelete {
	mutation := newEmoteMutation(c.config, OpDelete)
	return &EmoteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EmoteClient) DeleteOne(e *Emote) *EmoteDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EmoteClient) DeleteOneID(id int) *EmoteDeleteOne {
	builder := c.Delete().Where(emote.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmoteDeleteOne{builder}
}

// Query returns a query builder for Emote.
func (c *EmoteClient) Query() *EmoteQuery {
	return &EmoteQuery{
		config: c.config,
	}
}

// Get returns a Emote entity by its id.
func (c *EmoteClient) Get(ctx context.Context, id int) (*Emote, error) {
	return c.Query().Where(emote.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmoteClient) GetX(ctx context.Context, id int) *Emote {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProvider queries the provider edge of a Emote.
func (c *EmoteClient) QueryProvider(e *Emote) *ProviderQuery {
	query := &ProviderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emote.Table, emote.FieldID, id),
			sqlgraph.To(provider.Table, provider.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emote.ProviderTable, emote.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmoteClient) Hooks() []Hook {
	return c.hooks.Emote
}

// GameClient is a client for the Game schema.
type GameClient struct {
	config
}

// NewGameClient returns a client for the Game from the given config.
func NewGameClient(c config) *GameClient {
	return &GameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `game.Hooks(f(g(h())))`.
func (c *GameClient) Use(hooks ...Hook) {
	c.hooks.Game = append(c.hooks.Game, hooks...)
}

// Create returns a create builder for Game.
func (c *GameClient) Create() *GameCreate {
	mutation := newGameMutation(c.config, OpCreate)
	return &GameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Game entities.
func (c *GameClient) CreateBulk(builders ...*GameCreate) *GameCreateBulk {
	return &GameCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Game.
func (c *GameClient) Update() *GameUpdate {
	mutation := newGameMutation(c.config, OpUpdate)
	return &GameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameClient) UpdateOne(ga *Game) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGame(ga))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameClient) UpdateOneID(id int) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGameID(id))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Game.
func (c *GameClient) Delete() *GameDelete {
	mutation := newGameMutation(c.config, OpDelete)
	return &GameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GameClient) DeleteOne(ga *Game) *GameDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GameClient) DeleteOneID(id int) *GameDeleteOne {
	builder := c.Delete().Where(game.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameDeleteOne{builder}
}

// Query returns a query builder for Game.
func (c *GameClient) Query() *GameQuery {
	return &GameQuery{
		config: c.config,
	}
}

// Get returns a Game entity by its id.
func (c *GameClient) Get(ctx context.Context, id int) (*Game, error) {
	return c.Query().Where(game.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameClient) GetX(ctx context.Context, id int) *Game {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClip queries the clip edge of a Game.
func (c *GameClient) QueryClip(ga *Game) *ClipQuery {
	query := &ClipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(clip.Table, clip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, game.ClipTable, game.ClipColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVod queries the vod edge of a Game.
func (c *GameClient) QueryVod(ga *Game) *VodQuery {
	query := &VodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(vod.Table, vod.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, game.VodTable, game.VodColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameClient) Hooks() []Hook {
	return c.hooks.Game
}

// ProviderClient is a client for the Provider schema.
type ProviderClient struct {
	config
}

// NewProviderClient returns a client for the Provider from the given config.
func NewProviderClient(c config) *ProviderClient {
	return &ProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `provider.Hooks(f(g(h())))`.
func (c *ProviderClient) Use(hooks ...Hook) {
	c.hooks.Provider = append(c.hooks.Provider, hooks...)
}

// Create returns a create builder for Provider.
func (c *ProviderClient) Create() *ProviderCreate {
	mutation := newProviderMutation(c.config, OpCreate)
	return &ProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Provider entities.
func (c *ProviderClient) CreateBulk(builders ...*ProviderCreate) *ProviderCreateBulk {
	return &ProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Provider.
func (c *ProviderClient) Update() *ProviderUpdate {
	mutation := newProviderMutation(c.config, OpUpdate)
	return &ProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderClient) UpdateOne(pr *Provider) *ProviderUpdateOne {
	mutation := newProviderMutation(c.config, OpUpdateOne, withProvider(pr))
	return &ProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderClient) UpdateOneID(id int) *ProviderUpdateOne {
	mutation := newProviderMutation(c.config, OpUpdateOne, withProviderID(id))
	return &ProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Provider.
func (c *ProviderClient) Delete() *ProviderDelete {
	mutation := newProviderMutation(c.config, OpDelete)
	return &ProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProviderClient) DeleteOne(pr *Provider) *ProviderDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProviderClient) DeleteOneID(id int) *ProviderDeleteOne {
	builder := c.Delete().Where(provider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderDeleteOne{builder}
}

// Query returns a query builder for Provider.
func (c *ProviderClient) Query() *ProviderQuery {
	return &ProviderQuery{
		config: c.config,
	}
}

// Get returns a Provider entity by its id.
func (c *ProviderClient) Get(ctx context.Context, id int) (*Provider, error) {
	return c.Query().Where(provider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderClient) GetX(ctx context.Context, id int) *Provider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmotes queries the emotes edge of a Provider.
func (c *ProviderClient) QueryEmotes(pr *Provider) *EmoteQuery {
	query := &EmoteQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(provider.Table, provider.FieldID, id),
			sqlgraph.To(emote.Table, emote.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, provider.EmotesTable, provider.EmotesColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProviderClient) Hooks() []Hook {
	return c.hooks.Provider
}

// VodClient is a client for the Vod schema.
type VodClient struct {
	config
}

// NewVodClient returns a client for the Vod from the given config.
func NewVodClient(c config) *VodClient {
	return &VodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vod.Hooks(f(g(h())))`.
func (c *VodClient) Use(hooks ...Hook) {
	c.hooks.Vod = append(c.hooks.Vod, hooks...)
}

// Create returns a create builder for Vod.
func (c *VodClient) Create() *VodCreate {
	mutation := newVodMutation(c.config, OpCreate)
	return &VodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vod entities.
func (c *VodClient) CreateBulk(builders ...*VodCreate) *VodCreateBulk {
	return &VodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vod.
func (c *VodClient) Update() *VodUpdate {
	mutation := newVodMutation(c.config, OpUpdate)
	return &VodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VodClient) UpdateOne(v *Vod) *VodUpdateOne {
	mutation := newVodMutation(c.config, OpUpdateOne, withVod(v))
	return &VodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VodClient) UpdateOneID(id int) *VodUpdateOne {
	mutation := newVodMutation(c.config, OpUpdateOne, withVodID(id))
	return &VodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vod.
func (c *VodClient) Delete() *VodDelete {
	mutation := newVodMutation(c.config, OpDelete)
	return &VodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VodClient) DeleteOne(v *Vod) *VodDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VodClient) DeleteOneID(id int) *VodDeleteOne {
	builder := c.Delete().Where(vod.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VodDeleteOne{builder}
}

// Query returns a query builder for Vod.
func (c *VodClient) Query() *VodQuery {
	return &VodQuery{
		config: c.config,
	}
}

// Get returns a Vod entity by its id.
func (c *VodClient) Get(ctx context.Context, id int) (*Vod, error) {
	return c.Query().Where(vod.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VodClient) GetX(ctx context.Context, id int) *Vod {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryClips queries the clips edge of a Vod.
func (c *VodClient) QueryClips(v *Vod) *ClipQuery {
	query := &ClipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vod.Table, vod.FieldID, id),
			sqlgraph.To(clip.Table, clip.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, vod.ClipsTable, vod.ClipsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGame queries the game edge of a Vod.
func (c *VodClient) QueryGame(v *Vod) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vod.Table, vod.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, vod.GameTable, vod.GameColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VodClient) Hooks() []Hook {
	return c.hooks.Vod
}
