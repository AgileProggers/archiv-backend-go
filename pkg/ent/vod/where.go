// Code generated by entc, DO NOT EDIT.

package vod

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// Filename applies equality check predicate on the "filename" field. It's identical to FilenameEQ.
func Filename(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// Resolution applies equality check predicate on the "resolution" field. It's identical to ResolutionEQ.
func Resolution(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResolution), v))
	})
}

// Fps applies equality check predicate on the "fps" field. It's identical to FpsEQ.
func Fps(v float64) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFps), v))
	})
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// Publish applies equality check predicate on the "publish" field. It's identical to PublishEQ.
func Publish(v bool) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublish), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDuration), v))
	})
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDuration), v))
	})
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDuration), v...))
	})
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDuration), v...))
	})
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDuration), v))
	})
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDuration), v))
	})
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDuration), v))
	})
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDuration), v))
	})
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDate), v))
	})
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDate), v))
	})
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDate), v...))
	})
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDate), v...))
	})
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDate), v))
	})
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDate), v))
	})
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDate), v))
	})
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDate), v))
	})
}

// FilenameEQ applies the EQ predicate on the "filename" field.
func FilenameEQ(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilename), v))
	})
}

// FilenameNEQ applies the NEQ predicate on the "filename" field.
func FilenameNEQ(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilename), v))
	})
}

// FilenameIn applies the In predicate on the "filename" field.
func FilenameIn(vs ...string) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilename), v...))
	})
}

// FilenameNotIn applies the NotIn predicate on the "filename" field.
func FilenameNotIn(vs ...string) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilename), v...))
	})
}

// FilenameGT applies the GT predicate on the "filename" field.
func FilenameGT(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilename), v))
	})
}

// FilenameGTE applies the GTE predicate on the "filename" field.
func FilenameGTE(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilename), v))
	})
}

// FilenameLT applies the LT predicate on the "filename" field.
func FilenameLT(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilename), v))
	})
}

// FilenameLTE applies the LTE predicate on the "filename" field.
func FilenameLTE(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilename), v))
	})
}

// FilenameContains applies the Contains predicate on the "filename" field.
func FilenameContains(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilename), v))
	})
}

// FilenameHasPrefix applies the HasPrefix predicate on the "filename" field.
func FilenameHasPrefix(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilename), v))
	})
}

// FilenameHasSuffix applies the HasSuffix predicate on the "filename" field.
func FilenameHasSuffix(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilename), v))
	})
}

// FilenameEqualFold applies the EqualFold predicate on the "filename" field.
func FilenameEqualFold(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilename), v))
	})
}

// FilenameContainsFold applies the ContainsFold predicate on the "filename" field.
func FilenameContainsFold(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilename), v))
	})
}

// ResolutionEQ applies the EQ predicate on the "resolution" field.
func ResolutionEQ(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResolution), v))
	})
}

// ResolutionNEQ applies the NEQ predicate on the "resolution" field.
func ResolutionNEQ(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResolution), v))
	})
}

// ResolutionIn applies the In predicate on the "resolution" field.
func ResolutionIn(vs ...string) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResolution), v...))
	})
}

// ResolutionNotIn applies the NotIn predicate on the "resolution" field.
func ResolutionNotIn(vs ...string) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResolution), v...))
	})
}

// ResolutionGT applies the GT predicate on the "resolution" field.
func ResolutionGT(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResolution), v))
	})
}

// ResolutionGTE applies the GTE predicate on the "resolution" field.
func ResolutionGTE(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResolution), v))
	})
}

// ResolutionLT applies the LT predicate on the "resolution" field.
func ResolutionLT(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResolution), v))
	})
}

// ResolutionLTE applies the LTE predicate on the "resolution" field.
func ResolutionLTE(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResolution), v))
	})
}

// ResolutionContains applies the Contains predicate on the "resolution" field.
func ResolutionContains(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResolution), v))
	})
}

// ResolutionHasPrefix applies the HasPrefix predicate on the "resolution" field.
func ResolutionHasPrefix(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResolution), v))
	})
}

// ResolutionHasSuffix applies the HasSuffix predicate on the "resolution" field.
func ResolutionHasSuffix(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResolution), v))
	})
}

// ResolutionEqualFold applies the EqualFold predicate on the "resolution" field.
func ResolutionEqualFold(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResolution), v))
	})
}

// ResolutionContainsFold applies the ContainsFold predicate on the "resolution" field.
func ResolutionContainsFold(v string) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResolution), v))
	})
}

// FpsEQ applies the EQ predicate on the "fps" field.
func FpsEQ(v float64) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFps), v))
	})
}

// FpsNEQ applies the NEQ predicate on the "fps" field.
func FpsNEQ(v float64) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFps), v))
	})
}

// FpsIn applies the In predicate on the "fps" field.
func FpsIn(vs ...float64) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFps), v...))
	})
}

// FpsNotIn applies the NotIn predicate on the "fps" field.
func FpsNotIn(vs ...float64) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFps), v...))
	})
}

// FpsGT applies the GT predicate on the "fps" field.
func FpsGT(v float64) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFps), v))
	})
}

// FpsGTE applies the GTE predicate on the "fps" field.
func FpsGTE(v float64) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFps), v))
	})
}

// FpsLT applies the LT predicate on the "fps" field.
func FpsLT(v float64) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFps), v))
	})
}

// FpsLTE applies the LTE predicate on the "fps" field.
func FpsLTE(v float64) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFps), v))
	})
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSize), v))
	})
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSize), v))
	})
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSize), v...))
	})
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int) predicate.Vod {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vod(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSize), v...))
	})
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSize), v))
	})
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSize), v))
	})
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSize), v))
	})
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSize), v))
	})
}

// PublishEQ applies the EQ predicate on the "publish" field.
func PublishEQ(v bool) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublish), v))
	})
}

// PublishNEQ applies the NEQ predicate on the "publish" field.
func PublishNEQ(v bool) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublish), v))
	})
}

// HasCreator applies the HasEdge predicate on the "creator" edge.
func HasCreator() predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreatorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreatorWith applies the HasEdge predicate on the "creator" edge with a given conditions (other predicates).
func HasCreatorWith(preds ...predicate.Creator) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CreatorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CreatorTable, CreatorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClips applies the HasEdge predicate on the "clips" edge.
func HasClips() predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClipsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ClipsTable, ClipsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClipsWith applies the HasEdge predicate on the "clips" edge with a given conditions (other predicates).
func HasClipsWith(preds ...predicate.Clip) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClipsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ClipsTable, ClipsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGame applies the HasEdge predicate on the "game" edge.
func HasGame() predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GameTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GameTable, GameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameWith applies the HasEdge predicate on the "game" edge with a given conditions (other predicates).
func HasGameWith(preds ...predicate.Game) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GameInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GameTable, GameColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vod) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vod) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vod) predicate.Vod {
	return predicate.Vod(func(s *sql.Selector) {
		p(s.Not())
	})
}
