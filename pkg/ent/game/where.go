// Code generated by entc, DO NOT EDIT.

package game

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GameID applies equality check predicate on the "game_id" field. It's identical to GameIDEQ.
func GameID(v int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGameID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// BoxArt applies equality check predicate on the "box_art" field. It's identical to BoxArtEQ.
func BoxArt(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBoxArt), v))
	})
}

// GameIDEQ applies the EQ predicate on the "game_id" field.
func GameIDEQ(v int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGameID), v))
	})
}

// GameIDNEQ applies the NEQ predicate on the "game_id" field.
func GameIDNEQ(v int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGameID), v))
	})
}

// GameIDIn applies the In predicate on the "game_id" field.
func GameIDIn(vs ...int) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGameID), v...))
	})
}

// GameIDNotIn applies the NotIn predicate on the "game_id" field.
func GameIDNotIn(vs ...int) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGameID), v...))
	})
}

// GameIDGT applies the GT predicate on the "game_id" field.
func GameIDGT(v int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGameID), v))
	})
}

// GameIDGTE applies the GTE predicate on the "game_id" field.
func GameIDGTE(v int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGameID), v))
	})
}

// GameIDLT applies the LT predicate on the "game_id" field.
func GameIDLT(v int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGameID), v))
	})
}

// GameIDLTE applies the LTE predicate on the "game_id" field.
func GameIDLTE(v int) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGameID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// BoxArtEQ applies the EQ predicate on the "box_art" field.
func BoxArtEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBoxArt), v))
	})
}

// BoxArtNEQ applies the NEQ predicate on the "box_art" field.
func BoxArtNEQ(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBoxArt), v))
	})
}

// BoxArtIn applies the In predicate on the "box_art" field.
func BoxArtIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBoxArt), v...))
	})
}

// BoxArtNotIn applies the NotIn predicate on the "box_art" field.
func BoxArtNotIn(vs ...string) predicate.Game {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Game(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBoxArt), v...))
	})
}

// BoxArtGT applies the GT predicate on the "box_art" field.
func BoxArtGT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBoxArt), v))
	})
}

// BoxArtGTE applies the GTE predicate on the "box_art" field.
func BoxArtGTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBoxArt), v))
	})
}

// BoxArtLT applies the LT predicate on the "box_art" field.
func BoxArtLT(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBoxArt), v))
	})
}

// BoxArtLTE applies the LTE predicate on the "box_art" field.
func BoxArtLTE(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBoxArt), v))
	})
}

// BoxArtContains applies the Contains predicate on the "box_art" field.
func BoxArtContains(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBoxArt), v))
	})
}

// BoxArtHasPrefix applies the HasPrefix predicate on the "box_art" field.
func BoxArtHasPrefix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBoxArt), v))
	})
}

// BoxArtHasSuffix applies the HasSuffix predicate on the "box_art" field.
func BoxArtHasSuffix(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBoxArt), v))
	})
}

// BoxArtEqualFold applies the EqualFold predicate on the "box_art" field.
func BoxArtEqualFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBoxArt), v))
	})
}

// BoxArtContainsFold applies the ContainsFold predicate on the "box_art" field.
func BoxArtContainsFold(v string) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBoxArt), v))
	})
}

// HasClip applies the HasEdge predicate on the "clip" edge.
func HasClip() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClipTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClipTable, ClipColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClipWith applies the HasEdge predicate on the "clip" edge with a given conditions (other predicates).
func HasClipWith(preds ...predicate.Clip) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClipInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClipTable, ClipColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVod applies the HasEdge predicate on the "vod" edge.
func HasVod() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VodTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VodTable, VodColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVodWith applies the HasEdge predicate on the "vod" edge with a given conditions (other predicates).
func HasVodWith(preds ...predicate.Vod) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VodInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VodTable, VodColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		p(s.Not())
	})
}
