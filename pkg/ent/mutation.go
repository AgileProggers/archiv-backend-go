// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/AgileProggers/archiv-backend-go/pkg/ent/clip"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/creator"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeClip    = "Clip"
	TypeCreator = "Creator"
)

// ClipMutation represents an operation that mutates the Clip nodes in the graph.
type ClipMutation struct {
	config
	op             Op
	typ            string
	id             *int
	title          *string
	duration       *int
	addduration    *int
	date           *time.Time
	filename       *string
	resolution     *string
	size           *int
	addsize        *int
	view_count     *int
	addview_count  *int
	clearedFields  map[string]struct{}
	creator        *int
	clearedcreator bool
	done           bool
	oldValue       func(context.Context) (*Clip, error)
	predicates     []predicate.Clip
}

var _ ent.Mutation = (*ClipMutation)(nil)

// clipOption allows management of the mutation configuration using functional options.
type clipOption func(*ClipMutation)

// newClipMutation creates new mutation for the Clip entity.
func newClipMutation(c config, op Op, opts ...clipOption) *ClipMutation {
	m := &ClipMutation{
		config:        c,
		op:            op,
		typ:           TypeClip,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClipID sets the ID field of the mutation.
func withClipID(id int) clipOption {
	return func(m *ClipMutation) {
		var (
			err   error
			once  sync.Once
			value *Clip
		)
		m.oldValue = func(ctx context.Context) (*Clip, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Clip.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClip sets the old Clip of the mutation.
func withClip(node *Clip) clipOption {
	return func(m *ClipMutation) {
		m.oldValue = func(context.Context) (*Clip, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClipMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClipMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Clip.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *ClipMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ClipMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ClipMutation) ResetTitle() {
	m.title = nil
}

// SetDuration sets the "duration" field.
func (m *ClipMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *ClipMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *ClipMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *ClipMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *ClipMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetDate sets the "date" field.
func (m *ClipMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *ClipMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *ClipMutation) ResetDate() {
	m.date = nil
}

// SetFilename sets the "filename" field.
func (m *ClipMutation) SetFilename(s string) {
	m.filename = &s
}

// Filename returns the value of the "filename" field in the mutation.
func (m *ClipMutation) Filename() (r string, exists bool) {
	v := m.filename
	if v == nil {
		return
	}
	return *v, true
}

// OldFilename returns the old "filename" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldFilename(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilename is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilename requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilename: %w", err)
	}
	return oldValue.Filename, nil
}

// ResetFilename resets all changes to the "filename" field.
func (m *ClipMutation) ResetFilename() {
	m.filename = nil
}

// SetResolution sets the "resolution" field.
func (m *ClipMutation) SetResolution(s string) {
	m.resolution = &s
}

// Resolution returns the value of the "resolution" field in the mutation.
func (m *ClipMutation) Resolution() (r string, exists bool) {
	v := m.resolution
	if v == nil {
		return
	}
	return *v, true
}

// OldResolution returns the old "resolution" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldResolution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResolution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResolution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResolution: %w", err)
	}
	return oldValue.Resolution, nil
}

// ResetResolution resets all changes to the "resolution" field.
func (m *ClipMutation) ResetResolution() {
	m.resolution = nil
}

// SetSize sets the "size" field.
func (m *ClipMutation) SetSize(i int) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *ClipMutation) Size() (r int, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *ClipMutation) AddSize(i int) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *ClipMutation) AddedSize() (r int, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *ClipMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetViewCount sets the "view_count" field.
func (m *ClipMutation) SetViewCount(i int) {
	m.view_count = &i
	m.addview_count = nil
}

// ViewCount returns the value of the "view_count" field in the mutation.
func (m *ClipMutation) ViewCount() (r int, exists bool) {
	v := m.view_count
	if v == nil {
		return
	}
	return *v, true
}

// OldViewCount returns the old "view_count" field's value of the Clip entity.
// If the Clip object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClipMutation) OldViewCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViewCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViewCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViewCount: %w", err)
	}
	return oldValue.ViewCount, nil
}

// AddViewCount adds i to the "view_count" field.
func (m *ClipMutation) AddViewCount(i int) {
	if m.addview_count != nil {
		*m.addview_count += i
	} else {
		m.addview_count = &i
	}
}

// AddedViewCount returns the value that was added to the "view_count" field in this mutation.
func (m *ClipMutation) AddedViewCount() (r int, exists bool) {
	v := m.addview_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetViewCount resets all changes to the "view_count" field.
func (m *ClipMutation) ResetViewCount() {
	m.view_count = nil
	m.addview_count = nil
}

// SetCreatorID sets the "creator" edge to the Creator entity by id.
func (m *ClipMutation) SetCreatorID(id int) {
	m.creator = &id
}

// ClearCreator clears the "creator" edge to the Creator entity.
func (m *ClipMutation) ClearCreator() {
	m.clearedcreator = true
}

// CreatorCleared reports if the "creator" edge to the Creator entity was cleared.
func (m *ClipMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorID returns the "creator" edge ID in the mutation.
func (m *ClipMutation) CreatorID() (id int, exists bool) {
	if m.creator != nil {
		return *m.creator, true
	}
	return
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *ClipMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *ClipMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// Where appends a list predicates to the ClipMutation builder.
func (m *ClipMutation) Where(ps ...predicate.Clip) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ClipMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Clip).
func (m *ClipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClipMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.title != nil {
		fields = append(fields, clip.FieldTitle)
	}
	if m.duration != nil {
		fields = append(fields, clip.FieldDuration)
	}
	if m.date != nil {
		fields = append(fields, clip.FieldDate)
	}
	if m.filename != nil {
		fields = append(fields, clip.FieldFilename)
	}
	if m.resolution != nil {
		fields = append(fields, clip.FieldResolution)
	}
	if m.size != nil {
		fields = append(fields, clip.FieldSize)
	}
	if m.view_count != nil {
		fields = append(fields, clip.FieldViewCount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case clip.FieldTitle:
		return m.Title()
	case clip.FieldDuration:
		return m.Duration()
	case clip.FieldDate:
		return m.Date()
	case clip.FieldFilename:
		return m.Filename()
	case clip.FieldResolution:
		return m.Resolution()
	case clip.FieldSize:
		return m.Size()
	case clip.FieldViewCount:
		return m.ViewCount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case clip.FieldTitle:
		return m.OldTitle(ctx)
	case clip.FieldDuration:
		return m.OldDuration(ctx)
	case clip.FieldDate:
		return m.OldDate(ctx)
	case clip.FieldFilename:
		return m.OldFilename(ctx)
	case clip.FieldResolution:
		return m.OldResolution(ctx)
	case clip.FieldSize:
		return m.OldSize(ctx)
	case clip.FieldViewCount:
		return m.OldViewCount(ctx)
	}
	return nil, fmt.Errorf("unknown Clip field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case clip.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case clip.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case clip.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case clip.FieldFilename:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilename(v)
		return nil
	case clip.FieldResolution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResolution(v)
		return nil
	case clip.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case clip.FieldViewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViewCount(v)
		return nil
	}
	return fmt.Errorf("unknown Clip field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClipMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, clip.FieldDuration)
	}
	if m.addsize != nil {
		fields = append(fields, clip.FieldSize)
	}
	if m.addview_count != nil {
		fields = append(fields, clip.FieldViewCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClipMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case clip.FieldDuration:
		return m.AddedDuration()
	case clip.FieldSize:
		return m.AddedSize()
	case clip.FieldViewCount:
		return m.AddedViewCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClipMutation) AddField(name string, value ent.Value) error {
	switch name {
	case clip.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case clip.FieldSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	case clip.FieldViewCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddViewCount(v)
		return nil
	}
	return fmt.Errorf("unknown Clip numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClipMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClipMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Clip nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClipMutation) ResetField(name string) error {
	switch name {
	case clip.FieldTitle:
		m.ResetTitle()
		return nil
	case clip.FieldDuration:
		m.ResetDuration()
		return nil
	case clip.FieldDate:
		m.ResetDate()
		return nil
	case clip.FieldFilename:
		m.ResetFilename()
		return nil
	case clip.FieldResolution:
		m.ResetResolution()
		return nil
	case clip.FieldSize:
		m.ResetSize()
		return nil
	case clip.FieldViewCount:
		m.ResetViewCount()
		return nil
	}
	return fmt.Errorf("unknown Clip field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClipMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.creator != nil {
		edges = append(edges, clip.EdgeCreator)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case clip.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClipMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcreator {
		edges = append(edges, clip.EdgeCreator)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClipMutation) EdgeCleared(name string) bool {
	switch name {
	case clip.EdgeCreator:
		return m.clearedcreator
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClipMutation) ClearEdge(name string) error {
	switch name {
	case clip.EdgeCreator:
		m.ClearCreator()
		return nil
	}
	return fmt.Errorf("unknown Clip unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClipMutation) ResetEdge(name string) error {
	switch name {
	case clip.EdgeCreator:
		m.ResetCreator()
		return nil
	}
	return fmt.Errorf("unknown Clip edge %s", name)
}

// CreatorMutation represents an operation that mutates the Creator nodes in the graph.
type CreatorMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	clips         map[int]struct{}
	removedclips  map[int]struct{}
	clearedclips  bool
	done          bool
	oldValue      func(context.Context) (*Creator, error)
	predicates    []predicate.Creator
}

var _ ent.Mutation = (*CreatorMutation)(nil)

// creatorOption allows management of the mutation configuration using functional options.
type creatorOption func(*CreatorMutation)

// newCreatorMutation creates new mutation for the Creator entity.
func newCreatorMutation(c config, op Op, opts ...creatorOption) *CreatorMutation {
	m := &CreatorMutation{
		config:        c,
		op:            op,
		typ:           TypeCreator,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCreatorID sets the ID field of the mutation.
func withCreatorID(id int) creatorOption {
	return func(m *CreatorMutation) {
		var (
			err   error
			once  sync.Once
			value *Creator
		)
		m.oldValue = func(ctx context.Context) (*Creator, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Creator.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCreator sets the old Creator of the mutation.
func withCreator(node *Creator) creatorOption {
	return func(m *CreatorMutation) {
		m.oldValue = func(context.Context) (*Creator, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CreatorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CreatorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CreatorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CreatorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Creator.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CreatorMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CreatorMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Creator entity.
// If the Creator object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CreatorMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CreatorMutation) ResetName() {
	m.name = nil
}

// AddClipIDs adds the "clips" edge to the Clip entity by ids.
func (m *CreatorMutation) AddClipIDs(ids ...int) {
	if m.clips == nil {
		m.clips = make(map[int]struct{})
	}
	for i := range ids {
		m.clips[ids[i]] = struct{}{}
	}
}

// ClearClips clears the "clips" edge to the Clip entity.
func (m *CreatorMutation) ClearClips() {
	m.clearedclips = true
}

// ClipsCleared reports if the "clips" edge to the Clip entity was cleared.
func (m *CreatorMutation) ClipsCleared() bool {
	return m.clearedclips
}

// RemoveClipIDs removes the "clips" edge to the Clip entity by IDs.
func (m *CreatorMutation) RemoveClipIDs(ids ...int) {
	if m.removedclips == nil {
		m.removedclips = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.clips, ids[i])
		m.removedclips[ids[i]] = struct{}{}
	}
}

// RemovedClips returns the removed IDs of the "clips" edge to the Clip entity.
func (m *CreatorMutation) RemovedClipsIDs() (ids []int) {
	for id := range m.removedclips {
		ids = append(ids, id)
	}
	return
}

// ClipsIDs returns the "clips" edge IDs in the mutation.
func (m *CreatorMutation) ClipsIDs() (ids []int) {
	for id := range m.clips {
		ids = append(ids, id)
	}
	return
}

// ResetClips resets all changes to the "clips" edge.
func (m *CreatorMutation) ResetClips() {
	m.clips = nil
	m.clearedclips = false
	m.removedclips = nil
}

// Where appends a list predicates to the CreatorMutation builder.
func (m *CreatorMutation) Where(ps ...predicate.Creator) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CreatorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Creator).
func (m *CreatorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CreatorMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, creator.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CreatorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case creator.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CreatorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case creator.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Creator field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreatorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case creator.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Creator field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CreatorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CreatorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreatorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Creator numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CreatorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CreatorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CreatorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Creator nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CreatorMutation) ResetField(name string) error {
	switch name {
	case creator.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Creator field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CreatorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clips != nil {
		edges = append(edges, creator.EdgeClips)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CreatorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case creator.EdgeClips:
		ids := make([]ent.Value, 0, len(m.clips))
		for id := range m.clips {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CreatorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedclips != nil {
		edges = append(edges, creator.EdgeClips)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CreatorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case creator.EdgeClips:
		ids := make([]ent.Value, 0, len(m.removedclips))
		for id := range m.removedclips {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CreatorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedclips {
		edges = append(edges, creator.EdgeClips)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CreatorMutation) EdgeCleared(name string) bool {
	switch name {
	case creator.EdgeClips:
		return m.clearedclips
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CreatorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Creator unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CreatorMutation) ResetEdge(name string) error {
	switch name {
	case creator.EdgeClips:
		m.ResetClips()
		return nil
	}
	return fmt.Errorf("unknown Creator edge %s", name)
}
