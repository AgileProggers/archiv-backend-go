// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/clip"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/game"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/predicate"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/vod"
)

// VodUpdate is the builder for updating Vod entities.
type VodUpdate struct {
	config
	hooks    []Hook
	mutation *VodMutation
}

// Where appends a list predicates to the VodUpdate builder.
func (vu *VodUpdate) Where(ps ...predicate.Vod) *VodUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetTitle sets the "title" field.
func (vu *VodUpdate) SetTitle(s string) *VodUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetDuration sets the "duration" field.
func (vu *VodUpdate) SetDuration(i int) *VodUpdate {
	vu.mutation.ResetDuration()
	vu.mutation.SetDuration(i)
	return vu
}

// AddDuration adds i to the "duration" field.
func (vu *VodUpdate) AddDuration(i int) *VodUpdate {
	vu.mutation.AddDuration(i)
	return vu
}

// SetDate sets the "date" field.
func (vu *VodUpdate) SetDate(t time.Time) *VodUpdate {
	vu.mutation.SetDate(t)
	return vu
}

// SetFilename sets the "filename" field.
func (vu *VodUpdate) SetFilename(s string) *VodUpdate {
	vu.mutation.SetFilename(s)
	return vu
}

// SetResolution sets the "resolution" field.
func (vu *VodUpdate) SetResolution(s string) *VodUpdate {
	vu.mutation.SetResolution(s)
	return vu
}

// SetFps sets the "fps" field.
func (vu *VodUpdate) SetFps(f float64) *VodUpdate {
	vu.mutation.ResetFps()
	vu.mutation.SetFps(f)
	return vu
}

// AddFps adds f to the "fps" field.
func (vu *VodUpdate) AddFps(f float64) *VodUpdate {
	vu.mutation.AddFps(f)
	return vu
}

// SetSize sets the "size" field.
func (vu *VodUpdate) SetSize(i int) *VodUpdate {
	vu.mutation.ResetSize()
	vu.mutation.SetSize(i)
	return vu
}

// AddSize adds i to the "size" field.
func (vu *VodUpdate) AddSize(i int) *VodUpdate {
	vu.mutation.AddSize(i)
	return vu
}

// SetPublish sets the "publish" field.
func (vu *VodUpdate) SetPublish(b bool) *VodUpdate {
	vu.mutation.SetPublish(b)
	return vu
}

// AddClipIDs adds the "clips" edge to the Clip entity by IDs.
func (vu *VodUpdate) AddClipIDs(ids ...int) *VodUpdate {
	vu.mutation.AddClipIDs(ids...)
	return vu
}

// AddClips adds the "clips" edges to the Clip entity.
func (vu *VodUpdate) AddClips(c ...*Clip) *VodUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.AddClipIDs(ids...)
}

// AddGameIDs adds the "game" edge to the Game entity by IDs.
func (vu *VodUpdate) AddGameIDs(ids ...int) *VodUpdate {
	vu.mutation.AddGameIDs(ids...)
	return vu
}

// AddGame adds the "game" edges to the Game entity.
func (vu *VodUpdate) AddGame(g ...*Game) *VodUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return vu.AddGameIDs(ids...)
}

// Mutation returns the VodMutation object of the builder.
func (vu *VodUpdate) Mutation() *VodMutation {
	return vu.mutation
}

// ClearClips clears all "clips" edges to the Clip entity.
func (vu *VodUpdate) ClearClips() *VodUpdate {
	vu.mutation.ClearClips()
	return vu
}

// RemoveClipIDs removes the "clips" edge to Clip entities by IDs.
func (vu *VodUpdate) RemoveClipIDs(ids ...int) *VodUpdate {
	vu.mutation.RemoveClipIDs(ids...)
	return vu
}

// RemoveClips removes "clips" edges to Clip entities.
func (vu *VodUpdate) RemoveClips(c ...*Clip) *VodUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vu.RemoveClipIDs(ids...)
}

// ClearGame clears all "game" edges to the Game entity.
func (vu *VodUpdate) ClearGame() *VodUpdate {
	vu.mutation.ClearGame()
	return vu
}

// RemoveGameIDs removes the "game" edge to Game entities by IDs.
func (vu *VodUpdate) RemoveGameIDs(ids ...int) *VodUpdate {
	vu.mutation.RemoveGameIDs(ids...)
	return vu
}

// RemoveGame removes "game" edges to Game entities.
func (vu *VodUpdate) RemoveGame(g ...*Game) *VodUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return vu.RemoveGameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VodUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VodUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VodUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vod.Table,
			Columns: vod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vod.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldTitle,
		})
	}
	if value, ok := vu.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldDuration,
		})
	}
	if value, ok := vu.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldDuration,
		})
	}
	if value, ok := vu.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vod.FieldDate,
		})
	}
	if value, ok := vu.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldFilename,
		})
	}
	if value, ok := vu.mutation.Resolution(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldResolution,
		})
	}
	if value, ok := vu.mutation.Fps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vod.FieldFps,
		})
	}
	if value, ok := vu.mutation.AddedFps(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vod.FieldFps,
		})
	}
	if value, ok := vu.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldSize,
		})
	}
	if value, ok := vu.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldSize,
		})
	}
	if value, ok := vu.mutation.Publish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vod.FieldPublish,
		})
	}
	if vu.mutation.ClipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vod.ClipsTable,
			Columns: vod.ClipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clip.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedClipsIDs(); len(nodes) > 0 && !vu.mutation.ClipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vod.ClipsTable,
			Columns: vod.ClipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clip.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ClipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vod.ClipsTable,
			Columns: vod.ClipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clip.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.GameTable,
			Columns: []string{vod.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedGameIDs(); len(nodes) > 0 && !vu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.GameTable,
			Columns: []string{vod.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.GameTable,
			Columns: []string{vod.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VodUpdateOne is the builder for updating a single Vod entity.
type VodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VodMutation
}

// SetTitle sets the "title" field.
func (vuo *VodUpdateOne) SetTitle(s string) *VodUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetDuration sets the "duration" field.
func (vuo *VodUpdateOne) SetDuration(i int) *VodUpdateOne {
	vuo.mutation.ResetDuration()
	vuo.mutation.SetDuration(i)
	return vuo
}

// AddDuration adds i to the "duration" field.
func (vuo *VodUpdateOne) AddDuration(i int) *VodUpdateOne {
	vuo.mutation.AddDuration(i)
	return vuo
}

// SetDate sets the "date" field.
func (vuo *VodUpdateOne) SetDate(t time.Time) *VodUpdateOne {
	vuo.mutation.SetDate(t)
	return vuo
}

// SetFilename sets the "filename" field.
func (vuo *VodUpdateOne) SetFilename(s string) *VodUpdateOne {
	vuo.mutation.SetFilename(s)
	return vuo
}

// SetResolution sets the "resolution" field.
func (vuo *VodUpdateOne) SetResolution(s string) *VodUpdateOne {
	vuo.mutation.SetResolution(s)
	return vuo
}

// SetFps sets the "fps" field.
func (vuo *VodUpdateOne) SetFps(f float64) *VodUpdateOne {
	vuo.mutation.ResetFps()
	vuo.mutation.SetFps(f)
	return vuo
}

// AddFps adds f to the "fps" field.
func (vuo *VodUpdateOne) AddFps(f float64) *VodUpdateOne {
	vuo.mutation.AddFps(f)
	return vuo
}

// SetSize sets the "size" field.
func (vuo *VodUpdateOne) SetSize(i int) *VodUpdateOne {
	vuo.mutation.ResetSize()
	vuo.mutation.SetSize(i)
	return vuo
}

// AddSize adds i to the "size" field.
func (vuo *VodUpdateOne) AddSize(i int) *VodUpdateOne {
	vuo.mutation.AddSize(i)
	return vuo
}

// SetPublish sets the "publish" field.
func (vuo *VodUpdateOne) SetPublish(b bool) *VodUpdateOne {
	vuo.mutation.SetPublish(b)
	return vuo
}

// AddClipIDs adds the "clips" edge to the Clip entity by IDs.
func (vuo *VodUpdateOne) AddClipIDs(ids ...int) *VodUpdateOne {
	vuo.mutation.AddClipIDs(ids...)
	return vuo
}

// AddClips adds the "clips" edges to the Clip entity.
func (vuo *VodUpdateOne) AddClips(c ...*Clip) *VodUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.AddClipIDs(ids...)
}

// AddGameIDs adds the "game" edge to the Game entity by IDs.
func (vuo *VodUpdateOne) AddGameIDs(ids ...int) *VodUpdateOne {
	vuo.mutation.AddGameIDs(ids...)
	return vuo
}

// AddGame adds the "game" edges to the Game entity.
func (vuo *VodUpdateOne) AddGame(g ...*Game) *VodUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return vuo.AddGameIDs(ids...)
}

// Mutation returns the VodMutation object of the builder.
func (vuo *VodUpdateOne) Mutation() *VodMutation {
	return vuo.mutation
}

// ClearClips clears all "clips" edges to the Clip entity.
func (vuo *VodUpdateOne) ClearClips() *VodUpdateOne {
	vuo.mutation.ClearClips()
	return vuo
}

// RemoveClipIDs removes the "clips" edge to Clip entities by IDs.
func (vuo *VodUpdateOne) RemoveClipIDs(ids ...int) *VodUpdateOne {
	vuo.mutation.RemoveClipIDs(ids...)
	return vuo
}

// RemoveClips removes "clips" edges to Clip entities.
func (vuo *VodUpdateOne) RemoveClips(c ...*Clip) *VodUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return vuo.RemoveClipIDs(ids...)
}

// ClearGame clears all "game" edges to the Game entity.
func (vuo *VodUpdateOne) ClearGame() *VodUpdateOne {
	vuo.mutation.ClearGame()
	return vuo
}

// RemoveGameIDs removes the "game" edge to Game entities by IDs.
func (vuo *VodUpdateOne) RemoveGameIDs(ids ...int) *VodUpdateOne {
	vuo.mutation.RemoveGameIDs(ids...)
	return vuo
}

// RemoveGame removes "game" edges to Game entities.
func (vuo *VodUpdateOne) RemoveGame(g ...*Game) *VodUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return vuo.RemoveGameIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VodUpdateOne) Select(field string, fields ...string) *VodUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vod entity.
func (vuo *VodUpdateOne) Save(ctx context.Context) (*Vod, error) {
	var (
		err  error
		node *Vod
	)
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VodUpdateOne) SaveX(ctx context.Context) *Vod {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VodUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VodUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VodUpdateOne) sqlSave(ctx context.Context) (_node *Vod, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vod.Table,
			Columns: vod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vod.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vod.FieldID)
		for _, f := range fields {
			if !vod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldTitle,
		})
	}
	if value, ok := vuo.mutation.Duration(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldDuration,
		})
	}
	if value, ok := vuo.mutation.AddedDuration(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldDuration,
		})
	}
	if value, ok := vuo.mutation.Date(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vod.FieldDate,
		})
	}
	if value, ok := vuo.mutation.Filename(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldFilename,
		})
	}
	if value, ok := vuo.mutation.Resolution(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldResolution,
		})
	}
	if value, ok := vuo.mutation.Fps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vod.FieldFps,
		})
	}
	if value, ok := vuo.mutation.AddedFps(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: vod.FieldFps,
		})
	}
	if value, ok := vuo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldSize,
		})
	}
	if value, ok := vuo.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldSize,
		})
	}
	if value, ok := vuo.mutation.Publish(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vod.FieldPublish,
		})
	}
	if vuo.mutation.ClipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vod.ClipsTable,
			Columns: vod.ClipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clip.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedClipsIDs(); len(nodes) > 0 && !vuo.mutation.ClipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vod.ClipsTable,
			Columns: vod.ClipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clip.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ClipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   vod.ClipsTable,
			Columns: vod.ClipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: clip.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.GameTable,
			Columns: []string{vod.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedGameIDs(); len(nodes) > 0 && !vuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.GameTable,
			Columns: []string{vod.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.GameTable,
			Columns: []string{vod.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vod{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
