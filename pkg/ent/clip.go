// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/clip"
	"github.com/AgileProggers/archiv-backend-go/pkg/ent/creator"
)

// Clip is the model entity for the Clip schema.
type Clip struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title"`
	// Duration holds the value of the "duration" field.
	Duration int `json:"duration"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date"`
	// Filename holds the value of the "filename" field.
	Filename string `json:"filename"`
	// Resolution holds the value of the "resolution" field.
	Resolution string `json:"resolution"`
	// Size holds the value of the "size" field.
	Size int `json:"size"`
	// ViewCount holds the value of the "view_count" field.
	ViewCount int `json:"view_count"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClipQuery when eager-loading is set.
	Edges         ClipEdges `json:"edges"`
	creator_clips *int
}

// ClipEdges holds the relations/edges for other nodes in the graph.
type ClipEdges struct {
	// Creator holds the value of the creator edge.
	Creator *Creator `json:"creator,omitempty"`
	// Vod holds the value of the vod edge.
	Vod []*Vod `json:"vod,omitempty"`
	// Game holds the value of the game edge.
	Game []*Game `json:"game,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ClipEdges) CreatorOrErr() (*Creator, error) {
	if e.loadedTypes[0] {
		if e.Creator == nil {
			// The edge creator was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: creator.Label}
		}
		return e.Creator, nil
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// VodOrErr returns the Vod value or an error if the edge
// was not loaded in eager-loading.
func (e ClipEdges) VodOrErr() ([]*Vod, error) {
	if e.loadedTypes[1] {
		return e.Vod, nil
	}
	return nil, &NotLoadedError{edge: "vod"}
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading.
func (e ClipEdges) GameOrErr() ([]*Game, error) {
	if e.loadedTypes[2] {
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Clip) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case clip.FieldID, clip.FieldDuration, clip.FieldSize, clip.FieldViewCount:
			values[i] = new(sql.NullInt64)
		case clip.FieldTitle, clip.FieldFilename, clip.FieldResolution:
			values[i] = new(sql.NullString)
		case clip.FieldDate:
			values[i] = new(sql.NullTime)
		case clip.ForeignKeys[0]: // creator_clips
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Clip", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Clip fields.
func (c *Clip) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clip.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case clip.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case clip.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				c.Duration = int(value.Int64)
			}
		case clip.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				c.Date = value.Time
			}
		case clip.FieldFilename:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filename", values[i])
			} else if value.Valid {
				c.Filename = value.String
			}
		case clip.FieldResolution:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resolution", values[i])
			} else if value.Valid {
				c.Resolution = value.String
			}
		case clip.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				c.Size = int(value.Int64)
			}
		case clip.FieldViewCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field view_count", values[i])
			} else if value.Valid {
				c.ViewCount = int(value.Int64)
			}
		case clip.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field creator_clips", value)
			} else if value.Valid {
				c.creator_clips = new(int)
				*c.creator_clips = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCreator queries the "creator" edge of the Clip entity.
func (c *Clip) QueryCreator() *CreatorQuery {
	return (&ClipClient{config: c.config}).QueryCreator(c)
}

// QueryVod queries the "vod" edge of the Clip entity.
func (c *Clip) QueryVod() *VodQuery {
	return (&ClipClient{config: c.config}).QueryVod(c)
}

// QueryGame queries the "game" edge of the Clip entity.
func (c *Clip) QueryGame() *GameQuery {
	return (&ClipClient{config: c.config}).QueryGame(c)
}

// Update returns a builder for updating this Clip.
// Note that you need to call Clip.Unwrap() before calling this method if this Clip
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Clip) Update() *ClipUpdateOne {
	return (&ClipClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Clip entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Clip) Unwrap() *Clip {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Clip is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Clip) String() string {
	var builder strings.Builder
	builder.WriteString("Clip(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", title=")
	builder.WriteString(c.Title)
	builder.WriteString(", duration=")
	builder.WriteString(fmt.Sprintf("%v", c.Duration))
	builder.WriteString(", date=")
	builder.WriteString(c.Date.Format(time.ANSIC))
	builder.WriteString(", filename=")
	builder.WriteString(c.Filename)
	builder.WriteString(", resolution=")
	builder.WriteString(c.Resolution)
	builder.WriteString(", size=")
	builder.WriteString(fmt.Sprintf("%v", c.Size))
	builder.WriteString(", view_count=")
	builder.WriteString(fmt.Sprintf("%v", c.ViewCount))
	builder.WriteByte(')')
	return builder.String()
}

// Clips is a parsable slice of Clip.
type Clips []*Clip

func (c Clips) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
